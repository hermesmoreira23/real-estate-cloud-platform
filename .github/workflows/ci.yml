name: Terraform & App CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  terraform:
    name: Terraform Validate & Plan
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION:    eu-west-1
      TF_VAR_db_username:    ${{ secrets.TF_VAR_DB_USERNAME }}
      TF_VAR_db_password:    ${{ secrets.TF_VAR_DB_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Clean Terraform cache
        working-directory: terraform
        run: rm -rf .terraform .terraform.lock.hcl

      - name: Terraform Init (no backend)
        working-directory: terraform
        run: terraform init -backend=false

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      - name: Terraform Plan (binary)
        id: plan
        working-directory: terraform
        # ── Generamos un plan binario, sin stdout adicional ────────────────
        run: terraform plan \
               -out=tfplan       \
               -lock=false       \
               -input=false      \
               -var-file=terraform.tfvars

      - name: Convertir plan a JSON
        working-directory: terraform
        # ── Sólo vuelca JSON, sin trazas ni color ─────────────────────────
        run: terraform show -json tfplan > tfplan.json

      - name: Extraer endpoint RDS del plan
        id: extract_rds
        working-directory: terraform
        run: |
          # Dependiendo de tu versión de Terraform la clave puede estar en planned_values o en values:
          endpoint=$(jq -r '
            .planned_values.root_module.outputs.rds_endpoint.value
            // .values.root_module.outputs.rds_endpoint.value
          ' tfplan.json)

          if [[ "$endpoint" == "null" || -z "$endpoint" ]]; then
            echo "❌ No encontré rds_endpoint en tfplan.json"
            exit 1
          fi

          echo "rds_endpoint=$endpoint" >> $GITHUB_OUTPUT

    outputs:
      rds_endpoint: ${{ steps.extract_rds.outputs.rds_endpoint }}

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - uses: actions/checkout@v3
      - name: Build Docker image
        run: |
          docker build \
            --file app/Dockerfile \
            --tag real-estate-app:latest \
            .

  app-test:
    name: FastAPI App Tests
    runs-on: ubuntu-latest
    needs: docker-build
    env:
      DB_HOST:     ${{ needs.terraform.outputs.rds_endpoint }}
      DB_USER:     admin
      DB_PASSWORD: realhermes88
      DB_NAME:     realestate
      DB_PORT:     5432
      PYTHONPATH:  ${{ github.workspace }}/app

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: pip install -r requirements.txt pytest
      - name: Test DB Connection to RDS
        working-directory: app
        run: |
          python - <<EOF
          import sys, os
          sys.path.insert(0, ".")
          from db_config import engine
          conn = engine.connect()
          conn.close()
          print("✅ Conexión a RDS OK")
          EOF
      - name: Run tests
        working-directory: app
        run: pytest tests




