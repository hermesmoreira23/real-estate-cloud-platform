# .github/workflows/ci.yml
name: Terraform & App CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  terraform:
    name: Terraform Validate & Plan
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION:    eu-west-1
      TF_VAR_db_username:    ${{ secrets.TF_VAR_DB_USERNAME }}
      TF_VAR_db_password:    ${{ secrets.TF_VAR_DB_PASSWORD }}

    # Exponemos el endpoint de RDS como output de este job
    outputs:
      rds_endpoint: ${{ steps.get_rds.outputs.rds_endpoint }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Clean Terraform cache
        working-directory: terraform
        run: rm -rf .terraform .terraform.lock.hcl

      - name: Terraform Init (no backend)
        working-directory: terraform
        run: terraform init -backend=false

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: terraform
        run: terraform plan -var-file=terraform.tfvars

      - name: Guardar plan en archivo
        working-directory: terraform
        run: terraform plan -out=tfplan

      - name: Extraer endpoint RDS del plan
        id: extract_rds
        working-directory: terraform
        run: |
          endpoint=$(terraform show -json tfplan \
            | jq -r '.planned_values.root_module.outputs.rds_endpoint.value')
          if [ -z "$endpoint" ] || [ "$endpoint" = "null" ]; then
            echo "No aparece rds_endpoint en el plan, se omite"
          else
            echo "rds_endpoint=$endpoint" >> "$GITHUB_OUTPUT"
          fi

      - name: Get RDS endpoint
        id: get_rds
        working-directory: terraform
        run: |
          echo "rds_endpoint=$(terraform output -raw rds_endpoint)" >> $GITHUB_OUTPUT

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Build Docker image
        run: |
          docker build \
            --file app/Dockerfile \
            --tag real-estate-app:latest \
            .

  app-test:
    name: FastAPI App Tests
    runs-on: ubuntu-latest
    needs: docker-build
    env:
      # Para que pytest encuentre tu paquete `app`
      PYTHONPATH: ${{ github.workspace }}/app
      # Leemos el endpoint real de RDS desde los outputs del job "terraform"
      DB_HOST:    ${{ needs.terraform.outputs.rds_endpoint }}
      DB_PORT:    5432
      DB_NAME:    realestate
      DB_USER:    admin
      DB_PASSWORD: realhermes88

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt pytest

      - name: Test RDS Connection
        working-directory: app
        run: |
          python - <<EOF
          from db_config import engine
          # Intentamos abrir y cerrar la conexión al RDS
          conn = engine.connect()
          conn.close()
          print("✅ Conexión a RDS OK")
          EOF

      - name: Run tests
        run: pytest tests


