name: Terraform & App CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  terraform:
    name: Terraform Init, Refresh & Plan
    runs-on: ubuntu-latest

    # Aquí sí podemos usar secrets para las variables Terraform
    env:
      AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION:    eu-west-1
      TF_VAR_db_username:    ${{ secrets.TF_VAR_DB_USERNAME }}
      TF_VAR_db_password:    ${{ secrets.TF_VAR_DB_PASSWORD }}

    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Clean Terraform cache
        run: rm -rf .terraform .terraform.lock.hcl

      - name: Terraform Init + Refresh
        run: |
          terraform init -backend=false
          terraform refresh -lock=false

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color

      - name: Export RDS endpoint
        id: export_endpoint
        run: echo "rds_endpoint=$(terraform output -raw rds_endpoint)" >> $GITHUB_OUTPUT

    # Publicamos rds_endpoint como salida del job "terraform"
    outputs:
      rds_endpoint: ${{ steps.export_endpoint.outputs.rds_endpoint }}

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Build Docker image
        run: |
          docker build \
            --file app/Dockerfile \
            --tag real-estate-app:latest \
            .

  app-test:
    name: FastAPI App Tests
    runs-on: ubuntu-latest
    needs: docker-build

    # Ponemos aquí las mismas credenciales y el endpoint extraído
    env:
      PYTHONPATH: ${{ github.workspace }}/app
      DB_HOST:    ${{ needs.terraform.outputs.rds_endpoint }}
      DB_USER:    ${{ secrets.TF_VAR_DB_USERNAME }}
      DB_PASSWORD:${{ secrets.TF_VAR_DB_PASSWORD }}
      DB_NAME:    realestate
      DB_PORT:    5432

    # Levantamos un Postgres de prueba para los tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER:     ${{ secrets.TF_VAR_DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.TF_VAR_DB_PASSWORD }}
          POSTGRES_DB:       realestate
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U ${{ secrets.TF_VAR_DB_USERNAME }} -d realestate"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install -r requirements.txt pytest

      - name: Test DB Connection
        working-directory: app
        run: |
          python - <<EOF
          import os, sys
          # Añadimos 'app' al path para importar db_config.py
          sys.path.insert(0, "")
          from db_config import engine
          conn = engine.connect()
          conn.close()
          print("✅ Conexión a RDS OK")
          EOF

      - name: Run tests
        run: pytest tests








